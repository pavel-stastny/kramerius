plugins {
    id 'com.google.cloud.tools.jib'
}
apply plugin: 'war'
description "Core web application"


sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/conf'
            srcDir 'src/java'
        }
    }

    test {
        java {
            srcDir 'src/test'
        }
        resources {
            srcDir 'src/test'
        }
    }
}

dependencies {

    providedCompile 'javax.servlet:servlet-api:2.5'
    providedCompile 'javax.servlet:jsp-api:2.0'
    providedCompile 'javax.portlet:portlet-api:2.0'

    api project(':shared:common')
    api project(':rest')

    api project(':security:authfilters')
    api project(':security:oauth')

    api project(':processes:mw-process')
    api project(':processes:indexer')
    api project(':processes:import')

    api project(':processes:import-mets')
    api project(':processes:solr-migration')     //TODO: Delete
    api project(':processes:data-migration')     //TODO: Delete

    api project(':processes:dnntflag')           //TODO: Move licenses and dnnt delete
    api project(':processes:nkp-logs')           //TODO: Move
    api project(':processes:sdnnt')              //TODO: Move

    api project(':processes:licenses')
    api project(':processes:collections-backup')

    api 'javax.servlet:jstl:1.2'
    api 'taglibs:standard:1.1.2'
    api 'xalan:xalan:2.7.2'


    api 'xerces:xercesImpl:2.12.2'
    //api 'com.foxtrottechnologies:javadjvu:0.8.09'
    //api 'com.foxtrottechnologies:djvuframe:0.8.09'

    api "org.slf4j:slf4j-api:${slf4jversion}"
    api "org.slf4j:log4j-over-slf4j:${slf4jversion}"
    api "org.slf4j:slf4j-jdk14:${slf4jversion}"

    api 'net.sf.json-lib:json-lib:2.4:jdk15'

    api group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'

    api 'org.keycloak:keycloak-servlet-filter-adapter:${keycloakversion}'
    api 'org.keycloak:keycloak-authz-client:${keycloakversion}'

}


task gitcall(type: Exec) {
    commandLine "git", "rev-parse", "HEAD"
    standardOutput = new ByteArrayOutputStream()
    doLast {
        byte[] bytes = standardOutput.toByteArray()
        ext.hash = new String(bytes).trim();
    }
}


task infofile(dependsOn: gitcall) {
    doLast {
        def parentFolder = new File("$buildDir/resources/main")
        parentFolder.mkdirs()

        def buildInfoFile = new File("$buildDir/resources/main/build.properties")
        Properties props = new Properties()
        props.setProperty('version', project.version.toString())
        props.setProperty('hash', gitcall.hash)

        props.store(buildInfoFile.newWriter(), null)
        println "Created build file ${buildInfoFile.absolutePath} with version ${project.version.toString()} and hash ${gitcall.hash} "

        parentFolder.listFiles().each { f ->
            println "... ${f.absolutePath}"
        }
    }
}


//processResources.dependsOn infofile

//war.dependsOn infofile

war {
    baseName = 'search'
    archiveName = 'search.war'


    from 'web'

    //expand(project.properties)

    dependsOn 'infofile'
}

repositories {
    mavenCentral()
}


jib {
    from {
        image = 'tomcat:9.0.87-jre11-temurin-jammy'
        //image = 'bitnami/tomcat:9.0.75'
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }
    to {
        //image = "ceskaexpedice/kramerius:${version}"
        image = "pavelstastny/kramerius:${version}"
    }
    container {
        appRoot = '/usr/local/tomcat/webapps/search'
        //appRoot = '/opt/bitnami/tomcat/webapps/search'
        user = '0'
    }
}

